{"version":3,"sources":["Post.js","App.js","reportWebVitals.js","index.js"],"names":["Post","text","imgUrl","className","src","alt","App","useState","show","setShow","search","setSearch","gifs","setGifs","setText","selectedGifUrl","setSelectedGifUrl","showGifOnInput","setShowGifOnInput","posts","setPosts","hideGifhyArea","onClick","fontSize","style","color","placeholder","value","onChange","e","target","fetch","then","res","json","result","data","map","gif","images","fixed_height","url","catch","err","console","log","backgroundColor","borderRadius","type","preventDefault","length","gifUrl","index","post","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d4988450.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Post({text,imgUrl}) {\r\n    return (\r\n        <div className=\"post__container\">\r\n            <div className=\"post__text\">{text}</div>\r\n            <div className=\"post__image\">\r\n                <img src={imgUrl}  alt=\"gifhy\" />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\nimport VideocamIcon from '@material-ui/icons/Videocam';\nimport PhotoLibraryIcon from '@material-ui/icons/PhotoLibrary';\nimport CreateIcon from '@material-ui/icons/Create';\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\nimport GifIcon from '@material-ui/icons/Gif';\nimport DateRangeIcon from '@material-ui/icons/DateRange';\nimport CloseIcon from '@material-ui/icons/Close';\nimport LockIcon from '@material-ui/icons/Lock';\nimport Post from './Post';\n\nconst GIPHY_API = \"https://api.giphy.com/v1/gifs/search?api_key=MvIclgTmeF0dNQBiEKEY4DFi2BiRiH4n&limit=20&offset=0&q=\";\nconst GIPHY_API_TRENDING = \"https://api.giphy.com/v1/gifs/trending?api_key=MvIclgTmeF0dNQBiEKEY4DFi2BiRiH4n&limit=20&offset=0\";\n\nfunction App() {\n  const [show, setShow] = useState(false);\n  const [search, setSearch] = useState(\"\");\n  const [gifs, setGifs] = useState([]);\n  const [text, setText] = useState(\"\");\n  const [selectedGifUrl, setSelectedGifUrl] = useState(\"\");\n  const [showGifOnInput, setShowGifOnInput] = useState(false);\n  const [posts, setPosts] = useState([]);\n\n  const showGiphyArea = () => {\n    fetch(GIPHY_API_TRENDING)\n      .then((res) => {\n        return res.json();\n      })\n      .then((result) => {\n        setGifs(result.data.map((gif) => {\n          return gif.images.fixed_height.url;\n        }))\n      })\n      .catch((err) => {\n        console.log(err);\n      })\n\n      if(show){\n        setShow(false);\n      }\n      else{\n        setShow(true);\n      }\n  }\n\n  const searchGif = () => {\n    if (search.length > 0) {\n      fetch(GIPHY_API + search)\n        .then((res) => {\n          return res.json();\n        })\n        .then((result) => {\n          setGifs(result.data.map((gif) => {\n            return gif.images.fixed_height.url;\n          }))\n        })\n        .catch((err) => {\n          console.log(err);\n        })\n    }\n  }\n\n  const hideGifhyArea = () => {\n    setShow(false);\n  }\n\n  const selectGiphy =(e) => {\n    const gifUrl = e.target.src;\n    setSelectedGifUrl(gifUrl);\n    setShowGifOnInput(true);\n    setShow(false);\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    setPosts([\n      ...posts, {\n        text: text,\n        selectedGifUrl: selectedGifUrl\n      }\n    ])\n\n    setText(\"\");\n    setSelectedGifUrl(\"\");\n    setShowGifOnInput(false);\n  }\n\n  return (\n    <>\n      <div className=\"postMaker__container\" >\n\n        <div className=\"postMaker__content\">\n          <div className=\"postMaker__top\" onClick={hideGifhyArea}>\n            <div className=\"postMakerTop__option\">\n              <CreateIcon fontSize=\"small\" className=\"topIcons__color\" />\n              <h3>Live Video</h3>\n            </div>\n\n            <div className=\"postMakerTop__option\">\n              <PhotoLibraryIcon fontSize=\"small\" className=\"topIcons__color\" />\n              <h3>Photo/Video</h3>\n            </div>\n\n            <div className=\"postMakerTop__option\">\n              <VideocamIcon fontSize=\"small\" className=\"topIcons__color\" />\n              <h3>Live Video</h3>\n            </div>\n\n            <CloseIcon className=\"topIcons__color top__close\" />\n          </div>\n\n          <div className=\"postMaker__mid\" onClick={hideGifhyArea}>\n            <AccountCircleIcon fontSize=\"large\" style={{ color: \"gray\" }} />\n            <form>\n\n\n              <input\n                className=\"postMaker__input\"\n                placeholder=\"Write Somethig here...\"\n                value={text}\n                onChange={e => setText(e.target.value)}\n              />\n              <div className=\"selected__input__gif\">\n                {\n                  showGifOnInput && <img src={selectedGifUrl} alt=\"giphy\" />\n                }\n              </div>\n\n            </form>\n          </div>\n\n          <div className=\"postMaker__bottom\">\n            <div className=\"postMaker__option\">\n              <GroupAddIcon style={{ color: \"skyblue\" }} />\n              <h3>Tag friends</h3>\n            </div>\n\n            <div className=\"postMaker__option\">\n              <LocationOnIcon style={{ color: \"red\" }} />\n              <h3>Check in</h3>\n            </div>\n\n            <div className=\"postMaker__option\" onClick={showGiphyArea}>\n              <GifIcon style={{ backgroundColor: \"gray\", color: \"white\", borderRadius: \"30%\" }} />\n              <h3>GIF</h3>\n\n            </div>\n\n            <div className=\"postMaker__option\">\n              <DateRangeIcon style={{ backgroundColor: \"gray\", color: \"white\", borderRadius: \"30%\" }} />\n              <h3>Tag Event</h3>\n            </div>\n\n          </div>\n          <div className=\"bottom__buttons\">\n            <button type=\"button\"><LockIcon fontSize=\"small\" /> Only me</button>\n            <button onClick={handleSubmit} type=\"submit\">Post it</button>\n          </div>\n        </div>\n\n        {\n          show && <div className=\"giphy__container\">\n            <div className=\"giphy__area\">\n              <div className=\"giphy__search\">\n                <input type=\"text\" placeholder=\"Search Gif\" value={search} onChange={(e) => setSearch(e.target.value)} />\n                <button onClick={searchGif}>Search</button>\n              </div>\n              <div className=\"giphy__elements\" onClick={selectGiphy}>\n                {\n                  gifs.map((gif, index) => {\n                    return (\n                      <div key={index} className=\"item\">\n                        <img src={gif} alt=\"gif\" />\n                      </div>\n                    )\n                  })\n                }\n              </div>\n            </div>\n          </div>\n        }\n      </div>\n      {/* Rendering Posts on page */}\n      <div className=\"rendered__posts\"  onClick={hideGifhyArea}>\n        {posts.map((post, index) => {\n          return <Post key={index}\n            text={post.text}\n            imgUrl={post.selectedGifUrl}\n          />\n        })\n        }\n      </div>\n    </>\n  )\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}